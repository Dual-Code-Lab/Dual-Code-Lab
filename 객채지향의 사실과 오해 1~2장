## 01.협력하는 객채들의 공동체

첫장에서는 객체의 역할,책임,협력에 대하여 설명해주었다. 먼저 기능을 구현하면서 드러나는 객체의 특징을 살펴보자.  짧게 한 줄로 설명하면 **하나의 기능을 구현할때 객체들끼리 협력하고 객체 각각은 역할을 가지고 그 역할에 대한 책임을 갇는다.**  객체들은 역할이을 가지고 그 역할에 대한 책임을 가진다. 그래야 이 객체이대한 의미가 흐트러지지도 않고 무분별하게 사용돼지 않을것이다. 또한 더욱 자율적으로 사용할 수 있게 된다.

  손님 → (알바) → (바리스타) 

위 상황은 손님이 알바에게 주문을 하고 알바는 바리스타에게 커피를 만들어달라 요청하는상황

여기서 각각의 사람들은 객체이고 커피가 만들어지는 과정을 보여준다. 이렇게 볼때 우리는 객체의 특징을 보다 쉽게 볼 수 있다. 

- 객체의 특징
    
    -여러 객체는 동일한 역할을 수행할 수 있다.
    
    -역할은 대체 가능성을 의미한다.
    
    -각 객체는 책임을 수행하는 방법을 **자율적으로** 선택할 수 있다.
    
    -하나의 객체가 동시에 여러 역할을 수행할 수 있다.
    

### 상태와 행동을 함게 지닌 자율적인 객체

객체는 자율적이여야한다. 즉 **객체의 사적인 부분은 객체 스스로 관리하고 외부에서 일체 간섭할 수 없도록 차단해야하며, 객체외부에서는 접근이 허락된 수단을 통해서만 객체와 의사소통해야한다.** 즉 외부객체의 간섭이나 외부객체의 상태처리를 다른 객체에서 처리하는 순간 코드는 급격히 유지보수성과 재사용성이 떨어질 것이다. 

### 그래서 객체지향의 본질은??

자율적인 객체들의 공동체이며 상태와 행동을 가지고 있을며 서로 협력하며 각자의 역할에 책임을 다하는 집합이다.

## 02.이산한 나라의 객체

이장에서는 객체의 상태, 행동, 식별자를의 특징을 다룬다.

상태, 행동 ,식별자?

```java
public class Person{
	//식별자
	String soul = "나";
	String name = "김갑순";//상태

	//행동
	public void changeName(String newName){
		this.name = newName;
	}
}
```

위 코드를 참조하여 설명하겠다.

“**상태**”는 “김갑순”을 의미한다. 행동을 통해 변할 수 있는 값을 의미한다.

“**행동**”은 상태를 변화 시킬수있는 changeName을 의미한다. 누군가에게 메세지를 받고 자유롭게 하고자 하는 방법으로 상태를 변형시킬 수 있는 존재를 의미한다.

“**식별자**”는 말그대로 식별을 할 수 있게 해주는 즉 객체를 사람이라 가정했을때 이르밍 같더라도 “나”와 “너”를 구별해줄 수 있게 해주는 고유한 존재를 의미한다. 상태가 아무리 달라져도 “나”라는 존재를 확인시켜줄 수 있는 그런!! (이 책에서의 객체는 이 시별자를 가진 객채를 의미한다. 사실 객체에는 참조객체(reference object), 값객채(value object)등 여러가지가 존재한다.)

**“상태를 결정하는것을 행동이지만 행동의 결과를 결정하는것을 상태이다”**

말 그대로이다 상태를 행동으로 인해 변하고 그로인해 변화한 상태가 행동의 결과가된다. 왜 이부분이 중요하냐 상태를 변경할 수 있는 것은 오직 행동뿐이다. 코딩을 할때 객채지향적으로 짜기 위해서는 이 객채가 가지고 있는 “행동”을 통해서 상태가 변해야한다는 것이다. 또한 변화한 상태로도 객체를 구별할 수 있는 식별자가 존재해야한다는 것이다.
